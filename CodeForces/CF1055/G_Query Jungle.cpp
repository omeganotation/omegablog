/*
#############################################################################################%####################################%###############
#--%###*-=+-####--+::::=##%-:*#=:%#*-*#%-::+########%=::+##:=%#*-=#=-##:::::+%-:###-=####-:::=%##-::::*##=:=#####-::*%::::::+#-+###-::*##%--#%%--#
#::%###*:-*:-##=:#=..::-###=.*#-.*#=:**:.:..:#####*#:.:::##.-##+.+#=:##...::+%:.=#%:-####:.::.:%#..:::*#%::.####-.::-%:....:+*:=#*..:.:=##:.=##:-#
#::####*:-%::%#-:%=.#######*.+#:.:%:.%-:*##+:+#####-:#%##*#.-##+:=#=:*#.:%###%::.*%:-###%::##=:*#.-#####+:#.+##::####*##-:%##*.=#-:##%-:#%::.##::#
#::####*:-#+:*#:=#=.::-*####:=*.=:#:-#::%##*.=#####::######.::::.=#=:##..:--#%::--#:-####:.##::##.::-=##-:#:=#+:=#######-:%##*.=%:-###+.=%::-:#::#
#::####+:-#*:+*.*#=:::-#####:-=:+.*.+%::##%*.=*--=#::#####*..::..=#=:*#..::-#%:.+.+:-####:..:.+##:::-=##:=#-:*+:=#######::###*.=#:-###+:-#::*.*.-#
#::%###+:-##:-::%#=:########:::-#:-:%#::*##*.+#--=#::*###*#:-##+:=#=:*#::%###%::%=.:-####:.#::*##:-####*.....#*:-#######-:###*:=%-:###=:+%::#-.::%
#::*****:-##-..+##=.+***####=..##..:##*::%+.:####*#+::#*:##.-##*:=#=:##.:*#**%::#*:.-###%:.##:-##.:***#::###.-%-:-#+-%##-:###*:=#+..#+.-%#::#%:.:#
#:..::+*:=##%::*##=:...:%##%#::##=:-###*:..:#########:::-#*:-##*:+%=:##:..::=%::##+:-###%-:#%=:=%:....+:-###--*#=:.:=###-:###*:+*#*.::-###:-##+:-#
################################################################################################################################################%#
####################################################%#################################################################%#########%#################
%#%#%@%@@%%%%%*%@%#%%%%@@%@@@@@@#%%#***+++@@@@@@@@@@*@@%@@@@@@%#--@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%:*@@@@@@@%@@@@@@@@
##%%%@#@@@%%%%###@%%#%@@@@%#@@@@+%%++*%=##%@@@@@@@@@@-#@@@%@@@%#=:@@@@@@@@@@@@@@%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%:*@@@@@@%%=@@@@@@@
-#@@@@%%%%#%%%@%#####%##%#%*##+*+#@#*%%%+%%###@@@@@@@@+.-%@@@@%#-=@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%:+@@@@@@=:@@@@@@@@
--#@@#*%@@@@@@%%@%%#%%%***%@%##*++#+%%%%*=**#%@@@@@@@@@%+:.:-=*#%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@+:@@@@-.:@@@@@@@@@
:-:*%@@%%%@@%@%%%@#%*%*#%###%%%##*%#**=*+=-+=#=**@@%%*++#@@*=::.:.:::.:-#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%@@@@@@@@@@@@@@@@@@@@%%=-::-%@@@%@@@@@@
+--:*@@@@@@@@@@@@@@@@@%#%#%#%%%%%%#**+++=+**%#=-%%#*+++=%@**%@@@%%+-....::=@@@@@@@@@@@@@@@%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@+:::::.-#@@@@@@@@@@@@@
%+:::+@@@@@@@@@@@@@@@%@%#*#%@%*+*%@%@#*+*%%#%%@%%#++*+=#@%*@%@#-=#++*%%-...:#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%@@+:::::*%#-@@@@@@@@@@@@@@
#%##%%%@@@@@@@@@@@@@@@%@@@@@@%#%%@@%%@#+%%@*+##%%%#*@+*@%@@@@%#::=+++++*%:.::#@@@@@@@@@@@@%=#@@@@@@@@@@@@@@+@#@@@@@@@@@@%+::.+@*#%-:@@@@%@@@@@@@@@
%%%###%%%%###%%%@@@@@@@@%%@%%%#@%%@@@@%%@#%%=*#=++*%%%*@+#@%%@#-::%*%#*=+%=:..%@@@@@@@@@@@%==-=#@%@@@@@@%===*@@@@@@@@@%@#::-%#*+%%:+@@@@@@@@@@@@@@
%#%%##%#%@%#%%%%#%@@@@@%%%@@%%%%@%@%@@@@%@%#*=*=*##*#%%+*@@#*#%#::-#===:-+@:.:*@@@@@@@@@@@%+---==*@@%@@*==--=@@@@@@@@@@%*::%+-:*@+:%@@@@@@@@@@@@@@
%%#%%%###%%%#%###%@#=+=%@@%%@@%@%%@@@@%%%%@@@%@@%#+%###*%%@%@#%#+:.=@#%#**@::.*@@@@@@@@@@@%#=-=-===*@%*-=====#@@@@@@@@@#=:*###%@#:-@@@@@@@@@@@@@@@
%#@#%%%%%%%%%##%#%#@*+++%%@@@@@@#*@@@@@%@@@@@#%@@@**@%*%%@@@@#%@#+:::%*+++@=:.#@@@@@@@@@@@@#*==---=-*#*-==-=-=@@@@@@@@%#::@+*%%-.-@%@@@@@@@@@@@@@@
%##%%%%%%#%%#%%#%#%#@*+++@@%@@@@@@@@@@@@@@@@@@@@%%#%@%@%@@@%*#%#@%*:::=@+*@+::@@@@@@@@@@@%%@%#+==-===@*===-=*@@@%@@@@@#*:+%#+:.:#@%@@@@@@@@@@@@@@@
%##%%%%%###%#%%#%#%#%%*+*+%@@@@@@@@@@@@@@@@@@@@@@@%#@@@@@@@%@%%%#%@%+:.:-#@*::@@@@@@@%%%%%%%%@%#*=--=@*--=##*#@@@@@@@##=:*:-=#%#@@@@@@@@@@@@@@@@@@
##%%#%%%%@%%@%%@%%@@%%@*+*=%@@@@@@%@@@@@@@@@@@@@@@%@@@@@@@@@%@###@%%@%*::-@#=.%@@@@%%##%%%###%%%@%*+=@==#*+*%*++#@@@%#+.=@@*##+++%%@@@@%%%%%%%%%%%
#%#%%%@#%%%%#%%@###%#%%%++*+#@@@@@@@@@@@@@@@@@@@@@%@@@@@@@@@@@%%%%@**@@@%*%%#:+@@%%#%#*++##%#+++++*%%%*++++++*@%@@@##=.-%@%%#%++++@@@@%%%%%%%%%%%%
%@%#%#@%%@%%%%%%%%%%#%%@%%%#=*@@@@@@@@@@@@@@@%@@@@%@@@@@@@@@@@%#%%%#@@@%@%@@##:-%%#*+*#%%%*+++++++++++*++++++++%%##=:.*@@@#%%#++++@@@%%%######%%%%
#%%%%@%%%%#%%%@@@@@%%%%%%%%%@%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#%@@%@@%#%%#%%*%@##*-:=+*%%%#*++++++++++++*+++++++++#+:+#@@@@@@@@%*+++@@@%%%##########
%%%%@@@@%%%%%#%#%##%%%%%%#%%%#+==***%@@@@@@@@@@@@@@@@@@@@@@@@@@@@***##*#%%%%%%@%%%#*#@%*+++++++++++++++%++++++++=#*++%@@%@@@@%*+++@@%%%%##########
@@@%%%#%%###%%%%%#######%%%%%##+==#=====*+#%@@@@@@@@@@@@@@%@@@@+*#*+=#%@%#%%%%%%#%%%%%*+++++++**+++++++**+++**++++@+++%%@@@@@@#+=%%%%%%%##########
####%%%%%#%%%%%#%@%#####%%%%%%%*=+=#=====#+==*@@@@@@@@@@@**@@@###%@%%@@#%%%%%%%%##%%@*++++++*%++++++++++*++++###*+#*++*@@@@@%%%*@%%%%%%###########
%##%%%%%%##%%%%##%%######%%#%%%#++=+%=====#===+%@@%%@@@@@%#@@@%%%%%@@%#%%%%%%%%%%%%%%++=++#%#*++++++++++*+++++#==##++++@%@@%%%%####%%##%%######*##
%####%@%#%#%%%%###@%####%###%%%%#====*=====#==++#@@@@@@@@@@@@@@#%%%@%#%%%%%%%%%####%%#%%*===*#++++++++++*+++++#===+%+++%%%%%%%%%%#####%%%%%%%%%%%%
%####%#%#%#%%%%###%@######%%%%%%%+===#+====+%+=+*%@@@@@@@@%%#*%%@@@%%%%#%#%%%%%#++*#%=---==-=+%*++++++++++++++#=====%++*%%%%%%%%%#%###%%%%%%%%%%%@
%######%%%%%%%#%##%%%%%####%%%%%%#++==#======#=++*%@@@@@@@@@@%%@@@%%##%#%%%%##*++++#*-===---=-==##++++++++++**==-===%++#%%%%%%%%%%%%%#%%%%%%%@@@@@
%####%%#%%%%###%%%#%%%#%###%@%%%%%++=++#=====**=+++%@@@@@@@@@@@@@##%#%%%%%%#%*+++++%+==-===--===-=*%*+++++#*==-=--==%++#%%%%%%%%%%%%%%%#*%@@@@@@@@
%#######%@%%@@@%%#%%%%#%%#%%%%%%%##+*==**==+==*==+*+@@@@@@@@@@@@%%%%#%%%%%%#+++++++%+=========--====+%%**-=--====-==%++#@@%@%%%%#*%%%%%#%**+*@%@@%
%%#%%#%%#%@#****#%@@@@@%%@@@@@@@@@@@@@@@@%%#***+*++++%@@@@@@@@@%%%%%%%#%%%%*+++++++%+===-==========--====---=====-=+%++#@@@%%+++###%#%-=+#=-#%@@@#
%%##%%%#%##@##*******##%%%%%%#####**#**#*****##%@@%%%#@@@@@@@@%%%%%%%%%#%#*++++++++##=-====---=---==--==--=======-=*#++@@%#=*+++--:-=-+-==#*=++*=-
#%##%%%####%@%#%%%%%%%%%%%#***********************#%@@@@@@@@@@%%%%%%##%##*++++++++++%=---=--===--===========-==-==-%#+*@#**%#%%%@#*%%%%%#%@@%-*==*
%@#********##%%%%%%%%%%%##****************************%@@@@@@%#%%%%%#%%%*+++++++++++*%*-=-=-=-+%=-===========-*#==-%*=%+==%%%%%@@@##@%%@@@@@%@%%%%
%%%%%%%%%%%%%%%%%%%%%%%#********************************#%@@@%##%#%%#%%*+++++++++++*++#%==--=%*%============--%%=-*#+%%%%%%%@@@@%@%@@@@@@@@@%@@@%@
%%%%%%%%%%%%%%%%%%%%%%%#*******************************##%%%%#%%%%%%%%*++++++++=+#@#+++%%=-+#+*%====-=----===-##*#++++%%%%%@%%%@@@@@@@@@@@@@@@@@@@
%%%%%%%%%%%#@%%%%%%%%%%###****************************#%%%#%#%%%%%%%%#++++++++#@%###++**###++++##-====--=====#**%*++++*@@@%##%@@@@@@@@@@@@@@@@@@@@
%%%%@%*++++++%%%%%%%%%%%%%####*************####%%#%#**#%###%%%#%%%%%#+++*#%@%#*+++#%+%++++++++++#%==-===--=+%+++++++#==#%%%%@@@@@@@@@@@@@@@@@@@@@@
%%@#+=+++++++*%@@@%%*+++*@%%%%%%%%%##%%%@@%%%#++==**+%#########%%@%%%#%%%%#%*+++++***=+++++++++++*%#===-==@*++++++++*%++%%@@@@@@@@@@@@@@@@@@@@@@@@
@#+=+++++++++++++++=++++++%%%%%%%%%%%%%%###%#%*====##%##########%%%%%#%###%#+++=*++++++++++++++++++#@*-+%*+=+++++++++@++#@@@@@@@@@@@@@@@@@@@@@@@@@
#+++++++++++++++++++++++++%%%%%@@@%##%%@#%%%%##+=*%##########%#@%%%%%%%%%%%++++#++++++++++++++++++++++#++++++++++++++*#++@@@@@@@@@@@@@@@@@@@@@@@@@
#+++++*++++%++++++++++++++#@%@%%%#%##%%%%%%#%#%#%##############@%%%%%%%%%#++++*=++=+++++++++++++++++++*+++++++++++++++%++%@@@@@@@@@@@@@@@%%@%@@@@@
##%%%#++++#=++++++#+++++++*%#%%@%#######%#%%#%%%###%##########%#%%%%%@%#%*+++**=+++++++++++++++++++=++#+++++++++++++++%++#@%@@@@@@@@@@@@@@@@@%@%%#
%%%%%++++%+++++++*@%#+=+++*%%%#%@#%%###%%@%#%%##############%%%%%%#%@%#%*++++*++++++++++++++++++++++++#+++++++++++++++#*+#@@@@@@@@@@%%#########%%%
%%%@%*++*++++++++#@%@%####@%%%#%%@#%####%#%%%#%##############%%%%%%%@%%%++++*+++++++++++++++++++++++++#++++++++=++++++#%%@###*###%%%%%@@@@@@@@@@@@
%%%@##++*+++++++*%@%%@@%%%@%%##%%%%##%%%#%%%%################%%#%%#@%%%#+++++=++++++++++++++++++++++++#+++++++*+++++++#%%%@%%%%#%%@%#%@@@@@@@@@@@@
%%%@%##+*++++++#%@%%##@%%%%##%%%#%@%#%#%#%%#################%@%%#+=*##%%*++++++++++++++=+++++++++++=+=#+++++++*+++++++#@%%%%##%@@@@@@@@@@@@@@@@@@@
%%%%@%##**++##%%%##%##%@%%#%#%%##%#@%#%%%#############%######+--====%%#%#+++++++++++++*+++++++++++++++#++++++**+++++++##***#%#%@@@@@@@@@@@@@@@@@@@
%%%%%@%#%##%##%%##%#%%%%%#%%#%%%%%##@%#@%########%###%@#####==-======@%%#+++++++++++++#=++++++++++++#=*%+++++#++++++++%#*#%@@@%@@@@@%@@%%@@%%@@@@@
%%%%%%@%#%%%%@%##%%#%%%%%@%##%%%%%%%%%%%###########@%#%####=--=-=-=*%#@#%*++++++++++++@*++++++++++*+==-=##+++@*+++++++%%@%%@@@@@@@%%@%%%%%%@@@@@@@
%%%%%%%@%#%@%#%%%#%%##%%##@%#%%%%%#%#%%#%###%###%@###%%###=======+@*+=#@%%+++++++++++%*%+++++++=*#-=--====@+*+%+++++++%@@@@%%%%%%%%%%@@%@@@@@@@@@@
%%%%@%%#%%%%@%%%%%%%######%%%##%%#%%#@%######@@######%%%#=-=--=%%#+-===*@%#++++++++%+==#*++++=*%=-======-====-+%*+++++@%%%@@@%%%%%@%%@@@@@@@@@@@@@
@@#####%###%#%#%%%%%####%##%@%#%%%@%#%%%%%%##########%%*=-==#@#%==-=-==-+%@+++++##===-==@+++#*==-=======-==--===%#+++##@@@@%%%%%%%%%@@@@@@@@@@@@@@
%###%%%%##%%%#@%%%%%%%%##%#%%@%@%#%##%###############%#%%##%#*---=-==--===*%###==-====-=+%%=----=-=====--===-==-=%%++@=%@%%%%%%%%%@@@@@%@@@@@@@@@@
%%%############@#%#%%%%#%#%#%@%#%###########################==-======--======-===--===--===--==========-----======#%%-=+%%%@@%%%@@@@@@@@@@@@@@@@@@
%%%%%#########%#%#%%%%%%%#@@###############################*=====-------=--==--==---==-=====-============-=-=======---==%@@%%%%%%@@@@@@@@@@@@@@@@@
%%%%%##########%#@#%%#%%@%##%##########################%###==-=====------======-=-=----=-#=====-===-=--=====--=--======-@@@@@@@@@@@@@@@@@@@@@@@@@@
%%%%%#########%%##%%%#%%##################################*========------=======+===---=#%==---=-==@==-===-*==-=-======-%@@@@@@@@@@@@@@@@@@@@@@@@@
#%%%%#########%##%%%#@################################%###=-==========---=-====*%===-==*%%==-==-==@#%-=--==%+-===-====--#@@@@@@@@@@@@@@@@@@@@@@@@@
#%%%%%%########%#%#@%################%##################%*=====-===-===--=-==-#%%--=-=*##%+-=====@*#%@---==%%-==--=====-*@@@@@@@@@@@@@@@@@@@@@@@@@
#%%%%%%%########%#@###################################%##=-======-%====--=-==%#%+=-=-@#*%%*-=--+%*++##%*-==%%%---=----=-*@@@@@@@@@@@@@@@@@@@@@@@@@
#%%%%%%%########%###############%@%%##%#################*-========@%+==-==-*@+%@=-=%%*++%%#==*%#++=++%%%%*@#%%#--======-*@@@@@@@@@@@@@@@@@@@@@@@@@
#%%%%%%%######%%%############%@%#%#@####################=-=======+##@*-==@@**=%%###*+=++##%%%#*+++++++*#%%*+###@+=====-=%@@@@@@@@@@@@@@@@@@@@@@@@@
*/

#include <bits/stdc++.h>

using namespace std;

using ll = long long;
const int MOD = 1E9 + 7;
const int INF = 1E9; const ll INFLL = 1E18;

struct Seg {
    int n;
    vector<array<int, 4>> seg;
    vector<int> lazy;
    Seg() {}
    Seg(int n) {
        this->n = n;
        seg.resize(4 * n);
        lazy.resize(4 * n);
    }
    Seg(vector<array<int, 4>> a) {
        n = a.size();
        seg.resize(4 * n);
        lazy.resize(4 * n);
        build(1, 0, n - 1, a);
    }
    void build(int p, int l, int r, vector<array<int, 4>>& a) {
        if(l == r) {
            seg[p] = a[l];
            return;
        }
        int mid = l + (r - l) / 2;
        build(p * 2, l, mid, a);
        build(p * 2 + 1, mid + 1, r, a);
        for(int k = 0; k < 4; k++) {
            seg[p][k] = seg[p * 2][k] + seg[p * 2 + 1][k];
        }
    }
    void prop(int p) {
        if(lazy[p]) {
            swap(seg[p * 2][0], seg[p * 2][1]);
            swap(seg[p * 2][2], seg[p * 2][3]);
            lazy[p * 2] ^= 1;
            swap(seg[p * 2 + 1][0], seg[p * 2 + 1][1]);
            swap(seg[p * 2 + 1][2], seg[p * 2 + 1][3]);
            lazy[p * 2 + 1] ^= 1;
            lazy[p] = 0;
        }
    }
    void update(int p, int l, int r, int i, int j, int x) {
        if(l == r) {
            seg[p][j] += x;
            return; 
        }
        prop(p);
        int mid = l + (r - l) / 2;
        if(i <= mid) {
            update(p * 2, l, mid, i, j, x);
        } else {
            update(p * 2 + 1, mid + 1, r, i, j, x);
        }
        for(int k = 0; k < 4; k++) {
            seg[p][k] = seg[p * 2][k] + seg[p * 2 + 1][k];
        }
    }
    void update2(int p, int l, int r, int i, int j) {
        if(l == i && r == j) {
            swap(seg[p][0], seg[p][1]);
            swap(seg[p][2], seg[p][3]);
            lazy[p] ^= 1;
            return;
        }
        prop(p);
        int mid = l + (r - l) / 2;
        if(i <= mid) {
            update2(p * 2, l, mid, i, min(j, mid));
        }
        if(j > mid) {
            update2(p * 2 + 1, mid + 1, r, max(i, mid + 1), j);
        }
        for(int k = 0; k < 4; k++) {
            seg[p][k] = seg[p * 2][k] + seg[p * 2 + 1][k];
        }
    }
    int query(int p, int l, int r, int i, int j, int k) {
        if(l == i && r == j) {
            return seg[p][k];
        }
        prop(p);
        int mid = l + (r - l) / 2;
        int wochien = 0;
        if(i <= mid) {
            wochien = query(p * 2, l, mid, i, min(j, mid), k);
        }
        if(j > mid) {
            wochien += query(p * 2 + 1, mid + 1, r, max(i, mid + 1), j, k);
        }
        return wochien;
    }
};

const int MAX = 2.5E5;
const int LOG = 18;
int depth[MAX];
int lift[MAX][LOG];
int tin[MAX]; int tout[MAX];
int timer;

int jump(int x, int d) {
    for(int i = 0; i < LOG; i++) {
        if(d & (1 << i)) {
            x = lift[x][i];
        }
    }
    return x;
}

int n; int q;

void dfs(int x, vector<vector<int>>& adj, vector<int>& a, vector<array<int, 4>>& v, int p) {
    tin[x] = ++timer;
    v[tin[x]][2 + a[x]] = 1;
    lift[x][0] = p;
    for(int i : adj[x]) {
        if(i != p) {
            depth[i] = depth[x] + 1;
            dfs(i, adj, a, v, x);
            v[tin[x]][2] += v[tin[i]][2];
            v[tin[x]][3] += v[tin[i]][3];
        }
    }
    if(a[x] == 1 && v[tin[x]][3] == 1) {
        v[tin[x]][1]++;
    } else if(!a[x] && v[tin[x]][2] == 1) {
        v[tin[x]][0]++;
    }
    tout[x] = timer; 
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0); 
    int T; cin >> T;
    for(int test = 1; test <= T; test++) {
        cin >> n;
        vector<int> a(n);
        vector<vector<int>> adj(n);
        for (int i = 0; i < n; i++) {
            cin >> a[i];
        }
        for(int i = 0; i + 1 < n; i++) {
            int u; int v;
            cin >> u >> v;
            u--; v--;
            adj[u].push_back(v);
            adj[v].push_back(u);
        }
        cin >> q;
        timer = -1;
        vector<array<int, 4>> v(n);
        dfs(0, adj, a, v, -1);
        for(int i = 0; i < n; i++) {
            v[tin[i]][2 + a[i]] = 1;
            v[tin[i]][2 + (1 ^ a[i])] = 0;
        }
        for(int i = 1; i < LOG; i++) {
            for(int j = 0; j < n; j++) {
                if(lift[j][i - 1] == -1) {
                    lift[j][i] = -1;
                } else {
                    lift[j][i] = lift[lift[j][i - 1]][i - 1];
                }
            }
        }
        Seg seg(v);
        cout << seg.query(1, 0, n - 1, 0, n - 1, 1) << "\n";
        for(int i = 0; i < q; i++) {
            int v; cin >> v;
            v--;
            if(!seg.query(1, 0, n - 1, tin[v], tout[v], 3) && seg.query(1, 0, n - 1, 0, n - 1, 3)) {
                int lo = 0; int hi = depth[v] - 1;
                while(lo < hi) {
                    int mid = lo + (hi - lo + 1) / 2;
                    int ancestor = jump(v, depth[v] - mid);
                    if(seg.query(1, 0, n - 1, tin[ancestor], tout[ancestor], 3)) {
                        lo = mid;
                    } else {
                        hi = mid - 1;
                    }
                }
                int ancestor = jump(v, depth[v] - lo);
                if(seg.query(1, 0, n - 1, tin[ancestor], tout[ancestor], 3) == 1 && !seg.query(1, 0, n - 1, tin[ancestor] + 1, tout[ancestor], 3)) {
                    seg.update(1, 0, n - 1, tin[ancestor], 1, -1);
                }
            } else if(!seg.query(1, 0, n - 1, tin[v], tout[v], 2) && seg.query(1, 0, n - 1, 0, n - 1, 2)) {
                int lo = 0; int hi = depth[v] - 1;
                while(lo < hi) {
                    int mid = lo + (hi - lo + 1) / 2;
                    int ancestor = jump(v, depth[v] - mid);
                    if(seg.query(1, 0, n - 1, tin[ancestor], tout[ancestor], 2)) {
                        lo = mid;
                    } else {
                        hi = mid - 1;
                    }
                }
                int ancestor = jump(v, depth[v] - lo);
                if(seg.query(1, 0, n - 1, tin[ancestor], tout[ancestor], 2) == 1 && !seg.query(1, 0, n - 1, tin[ancestor] + 1, tout[ancestor], 2)) {
                    seg.update(1, 0, n - 1, tin[ancestor], 0, -1);
                }
            }
            seg.update2(1, 0, n - 1, tin[v], tout[v]);
            if(!seg.query(1, 0, n - 1, tin[v], tout[v], 3) && seg.query(1, 0, n - 1, 0, n - 1, 3)) {
                int lo = 0; int hi = depth[v] - 1;
                while(lo < hi) {
                    int mid = lo + (hi - lo + 1) / 2;
                    int ancestor = jump(v, depth[v] - mid);
                    if(seg.query(1, 0, n - 1, tin[ancestor], tout[ancestor], 3)) {
                        lo = mid;
                    } else {
                        hi = mid - 1;
                    }
                }
                int ancestor = jump(v, depth[v] - lo);
                if(seg.query(1, 0, n - 1, tin[ancestor], tout[ancestor], 3) == 1 && !seg.query(1, 0, n - 1, tin[ancestor] + 1, tout[ancestor], 3)) {
                    seg.update(1, 0, n - 1, tin[ancestor], 1, 1);
                }
            } else if(!seg.query(1, 0, n - 1, tin[v], tout[v], 2) && seg.query(1, 0, n - 1, 0, n - 1, 2)) {
                int lo = 0; int hi = depth[v] - 1;
                while(lo < hi) {
                    int mid = lo + (hi - lo + 1) / 2;
                    int ancestor = jump(v, depth[v] - mid);
                    if(seg.query(1, 0, n - 1, tin[ancestor], tout[ancestor], 2)) {
                        lo = mid;
                    } else {
                        hi = mid - 1;
                    }
                }
                int ancestor = jump(v, depth[v] - lo);
                if(seg.query(1, 0, n - 1, tin[ancestor], tout[ancestor], 2) == 1 && !seg.query(1, 0, n - 1, tin[ancestor] + 1, tout[ancestor], 2)) {
                    seg.update(1, 0, n - 1, tin[ancestor], 0, 1);
                }
            }
            cout << seg.query(1, 0, n - 1, 0, n - 1, 1) << "\n";
        } 
    }
}
